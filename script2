// после копипаста нажми CTRL + Z  - что бы восстановить форматирование

var replaceFiles = [
        {   from:  new RegExp('^.*/resources/(.*/)(.+)$','i'),
            to: 'm:/fiddler/replace/$1$2',
            includes: [ new RegExp('/Debug000.js') ],
            styleReplace:  { hideRow: false, backcolor: '#17AF13', color: '#000', bold: true  }, // стили строки при успешной подмене файла
            styleError:    { hideRow: false, backcolor: '#550000', color: '#000', bold: true  }  // стили строки при ошибках при подмене файла
        }
    ];

// настройки сборщика файлов в один тут задаем какие файлы и куда собирать
//  после первой загрузки он сохраняет каждый файл отдельно а после повторного запроса - собирает содержимое этих файлов в один
var collectFiles = [
        {  
            to: 'm:/collect_types/',
            includes: [ new RegExp('\\.sbis\\.ru.*/resources/Types/.*\\.js\\?')  ],
            styleSaveToCollect:   { hideRow: false, backcolor: '#F95500', color: '#000', bold: true  }, // стили строки до загрузки
            styleLoadFromCollect: { hideRow: false, backcolor: '#A55589', color: '#000', bold: false }  // стили строки при загрузке
        },
   
        {  
            to: 'm:/collect_all/',
            includes: [ new RegExp('\\.sbis\\.ru.*/resources/Controls/.*\\.js\\?')  ],
            excludes: [ new RegExp('\\.sbis\\.ru.*/resources/(bundles|contents|router)\\.js')  ],
            styleSaveToCollect:   { hideRow: false, backcolor: '#F95500', color: '#000', bold: true  }, // стили строки до загрузки
            styleLoadFromCollect: { hideRow: false, backcolor: '#A55589', color: '#000', bold: false }  // стили строки при загрузке
        },
    ];

var cacheFiles = [
   
        { // сохраняем сам страницы что бы не ждать по 2-7сек(иногда и 20+сек) загрузки
            includes: [ new RegExp('pre-test-n.sbis.ru/5cb2235b-6ce5-453d-8f48-3abf5edd3c57'),
                        new RegExp('pre-test-n.sbis.ru/661d219b-5193-469a-babb-b772d757f301') ],
            to: 'm:/cache_pages/',
            saveWithHeaders: true,
            styleSaveToCache:   { hideRow: false, backcolor: '#F9A900', color: '#000', bold: true  }, // стили строки до загрузки из кэша
            styleLoadFromCache: { hideRow: false, backcolor: '#F5EB89', color: '#000', bold: true  }  // стили строки при загрузке из кэша
        },
   
        { // картинки/шрифты и прочие статичные ресурсы
            includes: [ new RegExp('\\.sbis\\.ru/.*\\.(png|woff2|jpg|jpeg)$'),
                        new RegExp('\\.sbis\\.ru/cdn/.*\\.js') ],
            excludes: [ new RegExp('/geoserver/gwc/') ],
            to: 'm:/cache_static/',
            saveWithHeaders: true,  // картинкам шрифтам тоже надо сохранять заголовки!
            styleSaveToCache:   { hideRow: false, backcolor: '#F9F900', color: '#000', bold: false }, // стили строки до загрузки из кэша
            styleLoadFromCache: { hideRow: true,  backcolor: '#F5EB89', color: '#000', bold: false }  // стили строки при загрузке из кэша
        },
   
        /*
        {
            includes: [ new RegExp('\\.sbis\\.ru/resources/') ],
            to: 'm:/cache_other/',
            saveWithHeaders: true,
            styleSaveToCache:   { hideRow: false, backcolor: '#F9F900', color: '#000', bold: true  }, // стили строки до загрузки из кэша
            styleLoadFromCache: { hideRow: true,  backcolor: '#F5EB89', color: '#000', bold: false }  // стили строки при загрузке из кэша
        },
        */

    ];



// testOptions - проверяет каждую опцию из replaceFiles/collectFiles/cacheFiles
//               могут быть заданы параметры includes: RegExp[], excludes: RegExp[],
function checkOptions(opt: Object):Object {
    return opt;
}

// testFile - проверяет соответствует ли запрашиваемый файл в Session критериям в opt.includes/excludes
function testFile(opt: Object, oSession: Session):boolean {
    var url = oSession.fullUrl;
    var ok = false;
    var includes = opt.includes;
    if(includes && includes.length > 0) {
        for(var i = 0; i < includes.length; i++) {
            var re = includes[i];
            var b = re.test(url);
            if( b ) {
                ok = true;
                break;
            }
        }
        if(!ok) return false;
    }
    var excludes = opt.excludes;
    if(excludes && excludes.length > 0) {
        var excludes = opt.excludes;
        for(var i = 0; i < excludes.length; i++) {
            var re = excludes[i];
            var b = re.test(url);
            if( b ) return false;
        }
    }
    return true;
}

// set row style - проверяет соответствует ли запрашиваемый файл в Session критериям в opt.includes/excludes
function setRowStyle(opt: Object, oSession: Session):void {
    if(!opt) return;
    if(opt.hideRow) {
        oSession['ui-hide'] = true;
        return;
    }
    oSession["ui-color"] = opt.color;
    if(opt.bold) oSession["ui-bold"] = opt.bold;
    oSession["ui-backcolor"] = opt.backcolor;
}


import System;
import System.Windows.Forms;
import Fiddler;

var fileExists = System.IO.File.Exists;
var dirExists = System.IO.Directory.Exists;
var GetDirectoryName = System.IO.Path.GetDirectoryName;

function wlog(msg: String) {
    WriteToFile("C:/fiddler/log.txt",msg+"\n", 'a');
}

function WriteToFile(file: String, text: String, aORw: String) { // aORw=='a' || aORw=='w'  - a - append, w - write to file
    if( !CreatePathForFile(file) ) return 0;
    if( !aORw || aORw === 'a' ) return System.IO.File.AppendAllText(file,text);
    if( aORw === 'w' ) return System.IO.File.WriteAllText(file,text);
}

function CreatePathForFile(file: String) {
    return CreatePath( GetDirectoryName(file) );
}

function CreatePath(path: String) {
    if( !path ) return 0;
    if( !dirExists(path) ) {
        var basePath = GetDirectoryName(path);
        if( !dirExists(basePath) ) {
            var b = CreatePath(basePath);
            if( !b ) return 0;
        }
        return System.IO.Directory.CreateDirectory(path);
    }
    return 1;
}

// возвращает относительный путь к файлу из урл для сохранения (вместе с https_название_сайта/и/т/д)
//   extension:String - строка на которую будет заканчиваться файл если путь к нему заканчивается на /
function getFileSavePathFromUrl(oSession: Session,extension:String):String {
    var url = oSession.fullUrl;
    var file = url.replace(/[\?=\*].*$/,''); // удаляем все после ? или = или *
    file = file.replace(/(:\/\/|:)/g,'_'); // заменяем на _ все "://" или ":"
    file = file.replace(/\/+/g,'/');  // заменяем все двойные и более слеши на одинарный
    if(file.length > 200) file = file.substr(0,200); // путь к файлу должен быть не более 260 символов
    if(file.length > 0 && file[file.length-1] == '/') file += extension;
    return file;
}


class Handlers {
    // набор обработчиков для каждого типа
    static public var workers = new Array();
    static public var workersLoaded = 0;
   
    static function Main() {
        var i:int;
        var today: Date = new Date();
        FiddlerObject.StatusText = " CustomRules.js was loaded at: " + today;
        loadWorkers();
    }

    static function loadWorkers() {
        if( workersLoaded ) return;
        Handlers.workers = new Array();
        var workersLoaded = 0;
        var i;
        for(i = 0; i < replaceFiles.length; i++){
            Handlers.workers[workersLoaded] = new ReplaceFile(replaceFiles[i],i,workersLoaded++);
        }
        for(i = 0; i < collectFiles.length; i++){
            Handlers.workers[workersLoaded] = new CollectFile(collectFiles[i],i,workersLoaded++);
        }
        for(i = 0; i < cacheFiles.length; i++){
            Handlers.workers[workersLoaded] = new CacheFile(cacheFiles[i],i,workersLoaded++);
        }
        Handlers.workersLoaded = workersLoaded;
        alert('workers loaded: '+workersLoaded,'');
    }

    // The following snippet demonstrates a custom-bound column for the Web Sessions list.
    // See http://fiddler2.com/r/?fiddlercolumns for more info
    public static BindUIColumn("Method", 60)
    function FillMethodColumn(oS: Session): String {
        return oS.RequestMethod;
    }
   
    public static BindUIColumn("Time", 60)
    function FillTimeColumn(oS: Session): String {
        var d:double = (oS.Timers.ServerDoneResponse.Ticks - oS.Timers.ClientBeginRequest.Ticks)/10000;//(1000*1000*10);
        var n = d.toString().replace(/\..*$/,'');  // Math.Round(d,0)
        if( d > 24 * 60 * 60 *1000 ) n = '-';
        return n;
    }
   
    public static BindUIColumn("info", 200)
    function FillinfoColumn(oS: Session): String {
        var text = '';
        if( oS['_#info'] !== undefined ){
            if( oS["_#error"] == true ){
                text = 'ERROR';
                oS["ui-backcolor"] = "#aa5555";
                oS["ui-color"] = "#aaeeee";
                oS["ui-bold"] = true;
                text += oS["_#error"];
            }
            text += oS['_#info'];
        }
        return text;
    }        

    static function OnBeforeRequest(oSession: Session) {
        oSession.fullUrl = oSession.fullUrl.replace(/\$$/,'');
        var workers = Handlers.workers;
        var workersLoaded = Handlers.workersLoaded;
        for(var i = 0; i < workersLoaded; i++){
            var w:Worker = workers[i];
            if( w.loadResponse(oSession) ) return;
        }      
    }

    static function OnDone(oSession: Session) {
        var workerN = oSession['_#onDoneWorkerN'];
        if( workerN !== undefined ){
            var w:Worker = Handlers.workers[workerN];
            w.onDoneFnc(oSession);
        }
    }
}

class Worker {
    protected var opt:Object;
   
    function Worker(opt: Object, type:String, ruleN:int, workerN:int) {
        opt.type = type;
        opt.ruleN = ruleN;
        opt.workerN = workerN;
        opt.name = type + ' options' + ruleN;
        this.opt = checkOptions(opt);
    }
   
    public function loadResponse(oSession:Session):boolean {
        alert('какого хрена Worker',oSession);
        return false;
    }
   
    public function onDoneFnc(oSession:Session):boolean {
        return false;
    }
   
    public function setInfo(oSession:Session, text:String, isError:boolean):void {
        var opt = this.opt;
        oSession['_#info'] = '['+ opt.type +' rule ' + opt.ruleN + '] '+text;
        oSession['_#error'] = isError;
    }
   
    public function setStyle(oSession:Session, style: Object):void {
        if(!style) return;
        if(style.hideRow) {
            oSession['ui-hide'] = true;
            return;
        }
        oSession["ui-color"] = style.color;
        if(style.bold) oSession["ui-bold"] = style.bold;
        oSession["ui-backcolor"] = style.backcolor;
    }
       
    public function getInfo():String {
        var opt = this.opt;
        var text = '['+ opt.type +' rule ' + opt.ruleN + ']';
        return text;
    }
}

class ReplaceFile extends Worker {
    private var type;
   
    function ReplaceFile(opt: Object, ruleN:int, workerN:int) {
        super(opt, 'replace', ruleN, workerN);
        var to = this.opt.to
        if( /^[a-z]:(\\|\/)/i.test(to) ) {
            this.type = 'localfile';
        }else{
            alert('не верно задан параметр to',this.getInfo());
        }
    }
   
    public function loadResponse(oSession: Session):boolean {
        if( !testFile(this.opt, oSession) ) return false;
        var url = oSession.fullUrl;
        var to = this.opt.to
        var newUrl = url.replace( this.opt.from, to);
        if( newUrl === url ) return false;
        if( this.type == 'localfile' ) {
            var filePath = newUrl.replace(/\?.*$/,'');
            var b:boolean = oSession.LoadResponseFromFile(filePath);
            if( !b ){
                setRowStyle(this.opt.styleError, oSession);
                this.setInfo(oSession,'err load from file: ' + filePath, true);
            }else{
                setRowStyle(this.opt.styleReplace, oSession);
                this.setInfo(oSession, 'file: ' + filePath, false);
            }
        } else {
            setRowStyle(this.opt.styleReplace, oSession);
            this.setInfo(oSession,'url: ' + newUrl, false);
        }
        return true;
    }
}

class Collect {
    private var toPath = '';
    private var host = '';
    private var file = ''; // файл в который собираем все что сюда приходит
    private var locked = false;  // флаг что идет сборка
    private var filesCount = 0;
    private var fileLastUpdate: long;
    static  var updateTimeout = 10; // не чаще чем раз в 10 секунд обновляем этот файл! 
    private var filesLoaded = new Object();
    private var filesLoadedArr = new Array();
    private var filesNeedLoad = new Object();
    private var filesNeedLoadArr = new Array();
    
    function Collect(opt: Object, host:String) {
        this.toPath = opt.to;
        this.file = this.toPath + host.replace(/(:|\/\/)/,'_') + '.allfiles';     
        this.clearCollect();
    }
    
    public function clearCollect() {
        this.filesLoaded = Object();
        this.filesLoadedArr = new Array();
        this.filesCount = 0;
        WriteToFile(this.file,'','w'); // очищаем файл куда будем все собирать
        this.fileLastUpdate = System.IO.File.GetLastWriteTime(this.file).Ticks + 1000*1000*10 * Collect.updateTimeout; // 1000*1000*10 - 1 секунда
    }
    
    // updateCollect - собирает все файлы из filesNeedLoadArr в один this.file
    public function updateCollect(oSession: Session) {
        if( this.filesNeedLoadArr.length === 0 ) return;
        if( this.locked === true ) return; // если уже собираем файлы в один
        if( this.fileLastUpdate > DateTime.Now.Ticks ) return; // ничего не обновляем т.к. ещё не пришло время!

        this.locked = true;
        var filesNeedLoadArr = this.filesNeedLoadArr;
        this.filesNeedLoadArr = new Array();
        this.filesNeedLoad = Object();
        
        if( !fileExists(this.file) ) {
            this.clearCollect();
        }
       
        // alert('собираем в один файл '+this.file+' файлы: '+ filesNeedLoadArr.length, filesNeedLoadArr.slice(0,10) );
        var buffer = '';
        var loaded = 0;
        for(var i=0; i < filesNeedLoadArr.length; i++ ) {
            var filePath = filesNeedLoadArr[i];
            var fullFilePath = this.toPath + filePath;
            if( fileExists(fullFilePath) ) {
                buffer += System.IO.File.ReadAllText(fullFilePath, System.Text.Encoding.UTF8);
                loaded++;
                this.filesLoaded[filePath] = true; // ставим флаг что этот файл уже загружен в набор
                this.filesLoadedArr.push(filePath);
            }
        }
        if( loaded > 0 ) WriteToFile(this.file, buffer,'a'); // дописываем в файл
        // alert('в файл '+this.file+' было собрано файлов: '+i, filesNeedLoadArr.slice(0,10) );
        // alert('за время сборки было добавлено в очередь сборки файлов: '+this.filesNeedLoadArr.length, this.filesNeedLoadArr.slice(0,10) );
        this.filesCount += loaded;
        this.fileLastUpdate = System.IO.File.GetLastWriteTime(this.file).Ticks + 1000*1000*10 * Collect.updateTimeout; // 1000*1000*10 - 1 секунда

        this.locked = false;
    }
    
    public function loadResponse(oSession: Session):Object {
        var filePath = getFileSavePathFromUrl(oSession,'.collect');

        if( !this.locked ) { // если сейчас не собираем то можно добавлять файлы в очередь или возвращать собранный файл
            if( this.filesLoaded[filePath] ) { // если файл уже загружен в один общий
                oSession.LoadResponseFromFile(this.file);
                return { load: true, loadFromCollect: true, info: 'load from('+this.filesCount+' files): '+this.file };
            }
        }
        
        if( this.filesNeedLoad[filePath] !== true ){
            this.filesNeedLoad[filePath] = true;
            this.filesNeedLoadArr.push(filePath);
            this.updateCollect(oSession);
        }
        
        var fullFilePath = this.toPath + filePath;
        if( fileExists(fullFilePath) ) { // если его уже сохранили для сборки но ещё не собрали
            oSession.LoadResponseFromFile(fullFilePath); // сейчас возвращаем то что сохранили а в след проходе он уже будет в общей куче
            return { load: true, loadFromCollect: false, info: 'wait for add collect cached file: '+fullFilePath};
        }
        oSession['_#collectpath'] = fullFilePath;
        return { load: false, loadFromCollect: false, info: 'wait for cache file: '+fullFilePath};
    }
    
    public function onDoneFnc(oSession: Session):boolean {
        var filePath = oSession['_#collectpath'];
        if( !fileExists(filePath) ) {  
            oSession.utilDecodeResponse();
            var oBody = System.Text.Encoding.UTF8.GetString(oSession.responseBodyBytes);
            oBody = '\n\n/**** file: '+ oSession.fullUrl + ' ****/\n' + oBody;
            WriteToFile(filePath, oBody,'w');
        }
    }
}

class CollectFile extends Worker  {
    private var collects = new Object();  // для каждого хоста свой сборщик файлов

    function CollectFile(opt: Object, ruleN:int, workerN:int) {
        super(opt, 'collect', ruleN, workerN);
        var to = this.opt.to;
        if( !to || !/^[a-z]:(\\|\/)/i.test(to) ) {
            alert('не верно задан параметр to',this.getInfo());
            return;
        }      
        /*********
        var dt:DateTime = System.IO.File.GetCreationTime(this.oneFile);      
        var t1 = dt.Ticks;
        var t2 = dt.Ticks - 1000*1000*10;
        alert(
            '\ndt: '+ t1 +
            '\ndt: '+ t2 +
            '\ndt: '+ new DateTime(t1) +
            '\ndt: '+ new DateTime(t2) +
            '','');
        **********/
    }

    public function loadResponse(oSession: Session):boolean {
        if( !testFile(this.opt, oSession) ) return false;
        var host = oSession.host;
        var collect:Collect = this.collects[host];
        if( collect === undefined ) {
            collect = new Collect(this.opt, host);
            this.collects[host] = collect;
        }
        
        var style = this.opt.styleLoadFromCollect;
        var res = collect.loadResponse(oSession);
        
        if( res.load === false ) {
            oSession['_#onDoneWorkerN'] = this.opt.workerN;
        }
        if( res.loadFromCollect === false ) {
            style = this.opt.styleSaveToCollect;
        }
        
        this.setInfo(oSession, res.info, res.loadFromCollect);
        this.setStyle(oSession, style);
        
        return true;
    }
   
    public function onDoneFnc(oSession: Session):boolean {
        var host = oSession.host;
        var collect:Collect = this.collects[host];
        if( collect === undefined ) {
            alert('такого не должно было случиться!','обшибка!');
            return true;
        }
        collect.onDoneFnc(oSession);
    }

}

class CacheFile extends Worker {
   
    function CacheFile(opt: Object, ruleN:int, workerN:int) {
        super(opt, 'cache', ruleN, workerN);
    }
   
    public function loadResponse(oSession: Session):boolean {
        if( !testFile(this.opt, oSession) ) return false;
        var filePath = this.opt.to + getFileSavePathFromUrl(oSession,'.cache');
        if( fileExists(filePath) ) {
            var b = oSession.LoadResponseFromFile(filePath);
            if(b) {
                setRowStyle(this.opt.styleLoadFromCache, oSession);
                this.setInfo(oSession, 'load: '+filePath, false);
                return true;
            }else{
                this.setInfo(oSession, 'cant load: '+filePath, true);
            }
        }else{
            setRowStyle(this.opt.styleSaveToCache, oSession);
            this.setInfo(oSession, 'try save: '+filePath, false);
        }
        oSession['_#cachepath'] = filePath;
        oSession['_#onDoneWorkerN'] = this.opt.workerN;
        return true;
    }
   
    public function onDoneFnc(oSession: Session):boolean {
        var outFilePath = oSession['_#cachepath'];
        if( fileExists(outFilePath) ) return true;        
        oSession.utilDecodeResponse();
        if( this.opt.saveWithHeaders===true ){
            oSession.SaveResponse(outFilePath,false);
            return true;
        }
        var oBody = System.Text.Encoding.UTF8.GetString(oSession.responseBodyBytes);
        return WriteToFile(outFilePath,oBody,'w');
    }
}

function alert(msg,obj):void {
    if(obj && obj.name) msg += '\nname: '+obj.name;
    var dump:String = obj;
    if ( obj instanceof Array) dump = dumpArray(obj);
    FiddlerObject.alert(msg+'\n'+ dump);
}

function dumpArray(arr:Array):String {
    var s = '[';
    for(var i=0; i < arr.length; i++ ) {
        s += '\n  '+ String(arr[i]) +',';
    }
    if ( i > 0 ) s += '\n';
    return s + ']';
}
